{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","Components/About.js","Components/ContactMe.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","Link","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aboutxt","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","class","value","onChange","event","console","log","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","About","color","backgroundColor","mystyle","setmystyle","_useState3","_useState4","btnTxt","setBtnTxt","style","data-bs-parent","border","ContactMe","for","placeholder","App","setmode","setalert","message","setTimeout","setInterval","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","BrowserRouter"],"mappings":"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","file":"static/js/main.3f22740e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n\r\n    props.alert && <div>\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n \r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/main\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/TextForm\">Home</Link>\r\n          </li> */}\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutxt}</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/contactme\">Contact Me</Link>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\">Contact</Link>\r\n          </li> */}\r\n          {/* <li className=\"nav-item\">\r\n            <a className=\"nav-link disabled\" aria-disabled=\"true\">Disabled</a>\r\n          </li> */}\r\n        </ul>\r\n        <div className={`form-check form-switch  mr-6 text-${props.mode ==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" aria-checked id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  );\r\n  \r\n}\r\n\r\n\r\n    // Define your prop types here\r\n    Navbar.propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        aboutxt: PropTypes.number.isRequired\r\n        // Define more prop types as needed\r\n    }\r\n\r\n// Navbar.propTypes = {\r\n//     title: propTypes.string,\r\n//     aboutxt: propTypes.string\r\n// }\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        console.log(\"Uppercase Was Clicked\" + text)\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = () =>{\r\n      console.log(\"Uppercase Was Clicked\" + text)\r\n      let newText = text.toLowerCase()\r\n      setText(newText)\r\n      props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  }\r\n    const handleOnChange = (event) =>{\r\n        console.log(\"On Change\")\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    // Copy text\r\n    const handleCopy = () =>{\r\n      var text = document.getElementById(\"myBox\")\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value)\r\n      props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"))\r\n      props.showAlert(\"Removed extra spaces\", \"success\");\r\n    }\r\n    // Removes Extra spaces\r\n      // const handleExtraSpaces = () =>{\r\n      //   let newText = text.split(/[]+/);\r\n      //   setText(newText.join(\" \"))\r\n      // }\r\n  return (\r\n    <>\r\n<div className='container'>\r\n    <h1>{props.heading}</h1>\r\n<div class=\"mb-3\">\r\n<textarea class=\"form-control\" value = {text} onChange= {handleOnChange}id=\"myBox\" rows=\"3\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n{/* <button className='btn btn-primary mx-1 my-2' onClick={handleCopy}> Check Grammer Mistakes</button> */}\r\n{/* <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button> */}\r\n{/* <button className='btn btn-primary mx-2 my-2'>Fix Grammer Mistakes</button> */}\r\n</div>\r\n<div className='container my-3'>\r\n  <h2>Your Text Summary</h2>\r\n  <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n  <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n  <h2>Preview</h2>\r\n  <p>{text}</p>\r\n</div>\r\n</>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [mystyle, setmystyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  })\r\n  const [btnTxt, setBtnTxt] = useState(\"Enable Dark Mode\")\r\n  const toggleStyle = () =>{\r\n    if(mystyle.color ==='black'){\r\n        setmystyle({\r\n            color:'white',\r\n            backgroundColor: 'black',\r\n            border:'1px solid white' \r\n        })\r\n        setBtnTxt(\"Enable Light Mode\")\r\n    }\r\n    else{\r\n        setmystyle({\r\n            color: 'black',\r\n            backgroundColor:'white'\r\n        })\r\n        setBtnTxt(\"Enable Dark Mode\")\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\" style={mystyle}>\r\n      <h2 className=\"my-3\">About Us</h2>\r\n      <div class=\"accordion\" id=\"accordionExample\"style={mystyle}>\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\">\r\n            <button\r\n              class=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            class=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\"style={mystyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body\r\n                </code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\">\r\n            <button\r\n              class=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            class=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\"style={mystyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\">\r\n            <button\r\n              class=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={mystyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            class=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\"style={mystyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-3\">\r\n        <button onClick={toggleStyle} type=\"button\" class=\"btn btn-primary\">\r\n          {btnTxt}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function ContactMe() {\r\n    // const handleForm = () => {\r\n    //     console.log(\"Form is submitted\");\r\n    //     props.showAlert(\"Thanks for Connecting!\", \"success\");\r\n    //     // it is not working 25-08-2023\r\n    // }\r\n  return (\r\n    <>\r\n    <div class=\"mb-3 \">\r\n        <div class=\"mb-3 mx-5\">\r\n            <label for=\"exampleFormControlInput1 \" class=\"form-label\">Email address</label>\r\n                <input type=\"email\" class=\"form-control \" id=\"exampleFormControlInput1\" placeholder=\"name@example.com\"/>\r\n        </div>\r\n        <div class=\"mb-3 mx-5\">\r\n            <label for=\"exampleFormControlTextarea1\" class=\"form-label \">Message</label>\r\n            <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"5\"></textarea>\r\n        </div>\r\n        <button type=\"button\"  class=\"btn btn-primary mx-5\">Submit</button>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar.js';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\nimport React, {useState} from 'react';\nimport {Routes,   Route, } from 'react-router-dom';\nimport ContactMe from './Components/ContactMe';\n\n\nfunction App() {\n  const [mode, setmode] = useState('light') //Whether dark mode is enabled or not\n  const[alert, setalert] = useState()\n  const showAlert =(message, type) =>{\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n  const toggleMode =() =>{\n    if(mode === 'light'){\n      setmode('dark')\n      showAlert(\"Dark Mode has been enabled\",\"success\")\n      document.title = 'STRiiXER - Dark Mode'\n    }\n    else{\n      setmode  ('light')\n      showAlert(\"Light mode has been enabled\",\"success\")\n      document.title = 'STRiiXER - Light Mode'\n      // interval to show msgs on tab\n      setInterval(() => {\n        document.title = 'STRiiXER is Amazing'\n      }, 3000);\n      // setInterval(() => {\n      //   document.title =  'Download Now!'\n      // }, 1500);\n    }\n  }\n  return (\n   <>\n   <div>\n   <Navbar title= 'STRiiXER' aboutxt= 'About' mode={mode} toggleMode={toggleMode}/>\n   < Alert alert={alert}/>\n   < div className='container my-3'/>\n\n<Routes>\n  <Route path='/about' element={<About/>} />\n  {/* <Route path ='/main' element ={<div className='container'><TextForm showAlert={showAlert} heading='Enter the Text '/></div>}></Route> */}\n  <Route path = '/main' element = {<div className='container'><TextForm showAlert={showAlert} heading='Enter the Text '/></div>}></Route>\n  <Route path = '/contactme' element = {<ContactMe/>}></Route>\n  \n</Routes>\n\n   {/* <Routes>\n          <Route exact path=\"/About\">\n            <About />\n          </Route>\n         \n          <Route exact path=\"/TextForm\">\n          <TextForm showAlert={showAlert} heading='Enter the Text '/>\n          </Route>\n   </Routes> */}\n   {/* <div className='container'><TextForm showAlert={showAlert} heading='Enter the Text '/></div> */}\n   {/* <About/> */}\n   </div>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}